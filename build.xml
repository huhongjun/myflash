<project name="p2FlexPlayer.build" default="package">
	<dirname property="base.dir" file="${ant.file.p2FlexPlayer.build}" />
	<tstamp />
	
	<property name="ant.lib.dir" value="${base.dir}/ant.lib" />
	
	<property file="${base.dir}/local.properties" />
	<property file="${base.dir}/defaults.properties" />
	
	<property name="product.version" value="${product.version.base} ${product.build.version}" />
	
	<property name="dist.dir" value="${base.dir}/dist" />
	<property name="packages.dir" value="${base.dir}/packages" />
	
	<property name="doc.dir" value="${base.dir}/doc" />
	<property name="editor.dir" value="${base.dir}/editor.online" />
	<property name="utopia.lib.dir" value="${base.dir}/utopia.lib" />
	<property name="utopia.edit.lib.dir" value="${base.dir}/utopia.edit.lib" />
	<property name="editor.air.dir" value="${base.dir}/miniPublisher" />
	
	<available property="editor.online.available" file="${editor.dir}" />
	<available property="editor.air.available" file="${editor.air.dir}" />
	
	<target name="resolve.keystore" if="sign.keystore.rel" >
		<property name="sign.keystore" value="${base.dir}${file.separator}${sign.keystore.rel}" />
	</target>
	
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<fileset dir="${ant.lib.dir}">
				<include name="ant-contrib-*.jar" />
			</fileset>
		</classpath>
	</taskdef>
	
	<target name="compile-plugins">
		<for param="plugin.dir">
			<dirset dir="." includes="*"/>
			<sequential>
				<if>
				<available file="@{plugin.dir}/plugin.xml" />
				<then>
					<basename property="plugin.id" file="@{plugin.dir}"/>
					
					<ant antfile="@{plugin.dir}/build.xml" inheritAll="false" inheritRefs="false">
						<propertyset>
			  				<propertyref prefix="FLEX_HOME" />
			  				<propertyref prefix="src.revision" />
						</propertyset>
					</ant>
					<copy todir="${editor.air.dir}/dist/plugins/${plugin.id}">
						<fileset dir="@{plugin.dir}/dist"/>
					</copy>
					
					<var name="plugin.id" unset="true" />
				</then>
				</if>
			</sequential>
		</for>
	</target>
	
	<target name="dist" depends="dist.editor.online, dist.editor.air">
	</target>
	
	<target name="dist.editor.online" if="editor.online.available">
		<ant antfile="${editor.dir}/build.xml" inheritAll="false" inheritRefs="false">
			<propertyset>
  				<propertyref prefix="FLEX_HOME" />
  				<propertyref prefix="src.revision" />
  				<propertyref name="skip.utopialib.build" />
			</propertyset>
			<property name="product.version" value="${product.version}" />
		</ant>
		
		<mkdir dir="${dist.dir}/editor.online" />
		<copy todir="${dist.dir}/editor.online">
			<fileset dir="${editor.dir}/bin">
			</fileset>
		</copy>
		<property name="skip.utopialib.build" value="true" />
	</target>
	
	<target name="dist.editor.air" depends="resolve.keystore" if="editor.air.available">
		<ant antfile="${editor.air.dir}/build.xml" inheritAll="false" inheritRefs="false" target="dist">
			<propertyset>
  				<propertyref prefix="FLEX_HOME" />
  				<propertyref prefix="src.revision" />
  				<propertyref prefix="sign." />
  				<propertyref name="skip.utopialib.build" />
			</propertyset>
			<property name="product.version" value="${product.version}" />
		</ant>
		
		<antcall target="compile-plugins" />
		
		<ant antfile="${editor.air.dir}/build.xml" inheritAll="false" inheritRefs="false" target="package">
			<propertyset>
  				<propertyref prefix="FLEX_HOME" />
  				<propertyref prefix="src.revision" />
  				<propertyref prefix="sign." />
  				<propertyref name="skip.utopialib.build" />
			</propertyset>
			<property name="product.version" value="${product.version}" />
		</ant>
		
		<mkdir dir="${dist.dir}/editor.online" />
		<copy todir="${dist.dir}/editor.online">
			<fileset dir="${editor.dir}/bin">
			</fileset>
		</copy>
		<copy todir="${dist.dir}" failonerror="false">
			<fileset dir="${editor.air.dir}/package">
			</fileset>
		</copy>
		<property name="skip.utopialib.build" value="true" />
	</target>
	
	<target name="package.editor.online" depends="dist.editor.online" if="editor.online.available">
		<mkdir dir="${packages.dir}"/>
		<zip destfile="${packages.dir}/utEditor${packages.postfix}.zip" >
			<zipfileset dir="${dist.dir}/editor.online" prefix="dist/editor.online">
				<include name="**/*"/>
			</zipfileset>
			<zipfileset dir="${base.dir}" prefix="src">
				<exclude name="nexl*/**"/>
				<exclude name="miniPublisher*/**"/>
				<exclude name="miniPublisher/**"/>
				<exclude name="ext_*/**"/>
				<exclude name="**/dist/**"/>
				<exclude name="**/bin/**"/>
				<exclude name="**/swf/**"/>
				<exclude name="**/bin-debug/**"/>
				<exclude name="**/bin.local/**"/>
				<exclude name="**/version_gen/**"/>
				<exclude name="svnTasks/**"/>
				<exclude name="dist/**"/>
				<exclude name="packages/**"/>
				<exclude name=".metadata/**"/>
				<exclude name="**/.*" />
				<exclude name="**/.*/**" />
				<exclude name="**/build.properties" />
				<exclude name="**/local.properties" />
				<exclude name="**/*.mxp" />
			</zipfileset>
		</zip>
	</target>
	
	<target name="package.editor.air" depends="dist.editor.air" if="editor.air.available">
		<mkdir dir="${packages.dir}"/>
		<zip destfile="${packages.dir}/yCat${packages.postfix}.zip" >
			<zipfileset dir="${dist.dir}" prefix="dist/miniPublisher">
				<include name="*.air"/>
			</zipfileset>
			<zipfileset dir="${base.dir}" prefix="src">
				<exclude name="editor.online/**"/>
				<exclude name="**/dist/**"/>
				<exclude name="**/bin/**"/>
				<exclude name="**/swf/**"/>
				<exclude name="**/bin-debug/**"/>
				<exclude name="**/bin.local/**"/>
				<exclude name="**/version_gen/**"/>
				<exclude name="svnTasks/**"/>
				<exclude name="dist/**"/>
				<exclude name="packages/**"/>
				<exclude name=".metadata/**"/>
				<exclude name="**/.*" />
				<exclude name="**/.*/**" />
				<exclude name="**/build.properties" />
				<exclude name="**/local.properties" />
				<exclude name="**/*.mxp" />
			</zipfileset>
		</zip>
	</target>
	
	<target name="package" depends="package.editor.online, package.editor.air">
	</target>
	
	<target name="docs">
		<ant antfile="${utopia.edit.lib.dir}/build.xml" target="docs" inheritAll="false" inheritRefs="false" >
			<propertyset>
  				<propertyref prefix="FLEX_HOME" />
  				<propertyref prefix="src.revision" />
  				<propertyref prefix="product.version" />
			</propertyset>
			<property name="doc.dir" value="${doc.dir}/utopia.edit.lib" />
		</ant>
	</target>
	
	<target name="clean.editor.online" if="editor.online.available">
		<ant antfile="${editor.dir}/build.xml" target="clean" inheritAll="false" inheritRefs="false" />
	</target>
	
	<target name="clean.editor.air" if="editor.air.available">
		<ant antfile="${editor.air.dir}/build.xml" target="clean" inheritAll="false" inheritRefs="false" />
		<ant antfile="${base.dir}/ext_scorm/build.xml" target="clean" inheritAll="false" inheritRefs="false" />
		<ant antfile="${base.dir}/miniPublisherLib/build.xml" target="clean" inheritAll="false" inheritRefs="false" />
		<ant antfile="${base.dir}/nexl/build.xml" target="clean" inheritAll="false" inheritRefs="false" />
		<ant antfile="${base.dir}/nexlFlex/build.xml" target="clean" inheritAll="false" inheritRefs="false" />
	</target>
	
	<target name="clean" depends="clean.editor.online, clean.editor.air">
		<ant antfile="${utopia.lib.dir}/build.xml" target="clean" inheritAll="false" inheritRefs="false" />
		<ant antfile="${utopia.edit.lib.dir}/build.xml" target="clean" inheritAll="false" inheritRefs="false" />
		
		<delete dir="${dist.dir}"/>
		<delete dir="${packages.dir}"/>
	</target>
	
	<target name="install.utEditor" if="utEditor.install.dir">
		<copy file="${packages.dir}/utEditor${packages.postfix}.zip" todir="${utEditor.install.dir}"/>
	</target>
	
	<target name="install.yCat" if="yCat.install.dir">
		<copy file="${packages.dir}/yCat${packages.postfix}.zip" todir="${yCat.install.dir}"/>
		<copy file="${dist.dir}/yCat.air" todir="${yCat.install.dir}"/>
	</target>
	
	<target name="install.packages" depends="install.utEditor, install.yCat">
	</target>
</project>