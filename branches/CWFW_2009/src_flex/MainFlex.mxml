<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:view="puremvc.view.component.*" layout="absolute" creationComplete="initApp()" width="806.74243" height="589.24243" horizontalAlign="left">
	<mx:Style source="css/OSX/OSX.css" />
	<mx:LinkBar id="linkBar" x="512" y="10" width="278" height="26" />
	<mx:HBox width="583" height="30" verticalAlign="middle" horizontalGap="3" x="207" y="60" borderStyle="solid">
		<mx:Spacer width="6"/>
		<mx:Label text="当前章" id="txtChapter"/>
		<mx:Label text="&gt;" width="18" fontWeight="bold" textAlign="center" id="arrowFlag"/>
		<mx:Label text="当前节" id="txtSection"/>
		
	</mx:HBox>

	<mx:Tree width="189" height="508" horizontalCenter="-296" verticalCenter="14" 
			 id="treeContents" alternatingItemColors="[#DFDFDF,#EEEEEE]" 
			 dataProvider="{dpcourse}">
			 		
	</mx:Tree>
	<mx:ArrayCollection id="dpcourse">	</mx:ArrayCollection>

	<mx:SWFLoader x="207" y="98" width="583.9394" height="419.39392" id="contentSWFLoader"/>

	<mx:HBox width="583" height="49" creationComplete="initCtrlPanel()" horizontalAlign="center" verticalAlign="middle" horizontalGap="10" y="525" x="207" borderStyle="solid">
		<mx:Spacer width="10"/>
		<mx:Button id="btnPrevSection"/>
		<mx:Button x="93" y="41" id="btnNextSection"/>
		<mx:Spacer width="70%"/>
		<mx:Button id="btnVolumeOpenOrClose" click="openOrClose()"/>
		<mx:HSlider id="sldCtrlVolume" width="70" maximum="1" minimum="0" value="0.6" liveDragging="true"
			dataTipFormatFunction="formatVolumeToolTip" change="volumeChange(event)"/>
			<mx:Script>
				<![CDATA[
					import flash.media.SoundMixer;
					import flash.media.SoundTransform;
					import mx.events.SliderEvent;
					
					private var soundTrans:SoundTransform=SoundMixer.soundTransform;
					
					private function initCtrlPanel():void
					{				
						openState();//音量开关处于打开状态
					}
					
					//音量关闭或打开
					private function openOrClose():void
					{
						if(btnVolumeOpenOrClose.toolTip=="关闭")
						{
							closeState();
							soundTrans.volume=0;
							SoundMixer.soundTransform=soundTrans;
						}
						else
						{
							openState();
							soundTrans.volume=sldCtrlVolume.value;
							SoundMixer.soundTransform=soundTrans;
						}
					}			
					
					private function volumeChange(evt:SliderEvent):void
					{
						if(btnVolumeOpenOrClose.toolTip=="关闭")
						{
							soundTrans.volume=evt.value;
							SoundMixer.soundTransform=soundTrans;
						}
					}			
					
					private function openState():void
					{
						btnVolumeOpenOrClose.toolTip="关闭";
					}
					
					private function closeState():void
					{
						btnVolumeOpenOrClose.toolTip="打开";
					}
					
			  		//音量控制条 音量大小提示格式化	
			  		private function formatVolumeToolTip(value:Number):String
			  		{
			  			var temp:String=value.toString();
			  			if(temp.length==1)
			  			{
			  				return temp+".0";
			  			}
			  			else
			  			{
			  				return temp.substr(0,3);
			  			}
			  		}
				]]>
			</mx:Script>
	</mx:HBox>
	<mx:Script >
		<![CDATA[
			import info.osmatrix.rmframework.app.model.vo.ChapterVO;
			import info.osmatrix.rmframework.app.model.vo.SectionVO;
			/*
			 * 	initApp由应用初始调用：creationComplete="initApp()"
			 */
			import mx.events.*;
			import mx.managers.SystemManager;
			
			import info.osmatrix.rmframework.app.model.vo.CourseVO;
			import info.osmatrix.rmframework.app.view.event.MainViewEvent;
			
			private var playerType:String;
			private var playerUrl:String;
			
			private function initApp():void
			{
				//linkBar.addEventListener(ItemClickEvent.ITEM_CLICK, handleEvent);
				treeContents.addEventListener(ListEvent.ITEM_CLICK,	onSectionChanged);
				btnPrevSection.addEventListener(MouseEvent.CLICK,	onPrevSection);
				btnNextSection.addEventListener(MouseEvent.CLICK,	onNextSection);					

			}
			
			private function onSectionChanged(evt:Event):void
			{
 				if(!treeContents.dataDescriptor.isBranch(evt.target.selectedItem))
				{							
					dispatchEvent(new MainViewEvent(MainViewEvent.CE_SECTIONCHANGED, evt.target.selectedItem) );				
					//trace("itemClick:"+evt.target.selectedItem.toXMLString());
				}
			}

			private function onPrevSection(evt:Event):void
			{
				dispatchEvent(new MainViewEvent(MainViewEvent.CE_PREVSECTION, "") );
			}
						
			private function onNextSection(evt:Event):void
			{
				dispatchEvent(new MainViewEvent(MainViewEvent.CE_NEXTSECTION, "") );
			}

			// ----------供外部加载程序调用的公开函数-------------------------------------
	        public function initContent(content:CourseVO):void{
				//treeContents.dataProvider=facade.retrieveProxy(CourseProxy.NAME).getData().Chapter as XMLList;									
				//treeContents.callLater(expandAllNode);//初始展开所有节点	
				
				// 1. 目录树
				var chapters:Array = content.getChapterAll();
	        	treeContents.labelField="name";

	        	for each(var chapter:ChapterVO in chapters) {
	        		// DataProvider 添加章时需要的子项目数组集合
	        		var childrenSections:ArrayCollection = new ArrayCollection();
	        		
	        		// 提取当前操作章的节列表，填入children备用
					for each(var section:SectionVO in chapter.sections) {
						childrenSections.addItem({"name":section.name,"type":section.type,"url":section.path});
					}
	        		
					treeContents.dataProvider.addItem(
						{	"name":chapter.name,"children":childrenSections });
					
	        	}
	        	
	        	// 2. 功能按钮条
	        	
	        	// 3. 导航条与前进后退控制按钮条、学习历史进度
	        			
	        }
	        
	        public function refreshUI():void
	        {
	        	//txtChapter,arrowFlag,txtSection
	        	
	        }						
		]]>
	</mx:Script>

</mx:Application>
