<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="init()" backgroundColor="#FFFFFF" currentState="header">
	<mx:states>		
		<mx:State name="main">				
			<mx:RemoveChild target="{swfI}"/>
			<mx:RemoveChild target="{btnSkip}"/>
			<mx:AddChild position="lastChild">
				<mx:VBox height="100%" width="900" id="vbox1" horizontalAlign="center" verticalAlign="middle" y="0" horizontalCenter="-1"> 					
					<mx:Image width="100%" height="78" source="image/header.png" horizontalCenter="0" horizontalAlign="center" id="image1" scaleContent="true" autoLoad="true"/>
					<mx:HDividedBox liveDragging="true" width="100%" height="100%" id="hdividedbox1" horizontalAlign="center" verticalAlign="middle">
        	 			<mx:Panel title="课程目录" width="25.5%" height="100%" id="panel1" fontSize="12" horizontalAlign="center" verticalAlign="middle">
        	 				<mx:Tree id="treeMenu" iconFunction="readedIconFun" toolTip="dd" toolTipStart="startTreeToolTip(event)" width="100%" height="100%" labelField="@name" dataProvider="{treeMenuData}" change="treeMenuChanged(event)" itemOpening="onItemClosing(event)"/>
        	 			</mx:Panel>
        	 			<mx:VBox id="mainVBox" height="100%" width="74.5%" horizontalAlign="center" verticalAlign="middle">
        	 				<mx:HBox height="30" fontSize="12" verticalAlign="middle" width="100%" id="hbox1">
        	 					<mx:Image source="image/bread.gif"/>
        	 					<mx:Label text="{currentChapterName}" />
        	 					<mx:Image source="image/linkTransparent.gif"/>
        	 					<mx:Label text="{currentSectionName}"/>
        	 					<mx:Spacer width="100%" id="spacer1"/>
        	 					<mx:Label text="选择皮肤:" id="label2"/>
        	 					<mx:ComboBox id="skinComb" dataProvider="{skinData}" labelField="@name" change="skin_change(event)"/>
        	 				</mx:HBox>
        	 				<mx:VBox id="swfBox" horizontalAlign="center" width="100%" height="100%">
        	 					<mx:SWFLoader id="swfC" unload="unloadHandler()" init="templateInit(event)" complete="completeHandler()" autoLoad="true" scaleContent="true" width="100%" height="100%"/>
        	 				</mx:VBox>        	 				
        	 			</mx:VBox>        				
   					</mx:HDividedBox>
   					
					<mx:Canvas id="controlCanvas" width="100%" height="87">
						<mx:Image source="image/panel-background.png" width="100%" height="100%" horizontalCenter="0" horizontalAlign="center" id="image2" verticalCenter="0" scaleContent="true" autoLoad="true"/>
						<mx:Label text="第 " height="22" width="17.05" textAlign="left" fontSize="14" fontWeight="bold" x="608" y="5" id="label1"/>
						<mx:Label text="页，共" height="22" width="50.05" textAlign="left" fontSize="14" fontWeight="bold" x="662.1" y="5"/>
						<mx:Label text="页" height="22" width="18.05" textAlign="left" fontSize="14" fontWeight="bold" x="751.05" y="5"/>
						<mx:Label id="total_page" height="22" width="42" textAlign="center" fontSize="14" fontWeight="bold" x="712.1" y="5" text="{totalPage}"/>
						<mx:Label width="12" height="25" fontSize="13" x="231.95" y="6" text="/"/>
						<mx:Label id="total_time" width="52" height="25" fontSize="13" x="239.95" y="6" text="{totalTime}" textAlign="center"/>
						<mx:Label id="current_time" width="52" height="25" fontSize="13" x="176.9" y="6" text="{currentTime}" textAlign="center"/>
						<mx:ProgressBar id="progress" mode="manual" source="{swfC}" complete="progressComplete()" minimum="0" maximum="{mc.totalFrames}" labelPlacement="left" label="播放" width="238.24176" height="24.505493" fontSize="15" x="319" y="6.5"/>
						<mx:HSlider id="slider" liveDragging="true" dataTipFormatFunction="formatSliderToolTip" change="slider_change(event)"  minimum="0" maximum="{mc.totalFrames}" thumbPress="onPress()" thumbRelease="onRelease()" buttonMode="true" useHandCursor="true" x="357.3" y="10" width="207.2"/>
						<mx:Label id="current_page" height="22" width="42" textAlign="center" fontSize="14" fontWeight="bold" x="622.05" y="5" text="{currentPage}"/>
												
						<mx:Button label="停止" icon="@Embed(source='image/button_stop_icon.png')" width="36" height="36"  x="319" y="39" click="stopBtnClick()" id="button6"/>
						<mx:Button label="上一页" icon="@Embed(source='image/button_prev_icon.png')" width="36" height="36"  x="372" y="39" click="prePage()"/>
						<mx:Button id="btnPause" label="暂停" icon="@Embed(source='image/button_pause_icon.png')" width="36" height="36" x="432" y="39" click="pause()"/>
						<mx:Button id="btnPlay" label="播放" icon="@Embed(source='image/button_play_icon.png')" width="36" height="36" x="432" y="39" click="play()"/>
						<mx:Button label="下一页" icon="@Embed(source='image/button_next_icon.png')" width="36" height="36" x="486" y="39" click="nextPage()"/>						
						<mx:Button id="btnShutSound" label="静音" icon="@Embed(source='image/colume.jpg')" width="36" height="36" x="539" y="39" click="shutSound()"/>						
						<mx:Button label="系统配置" icon="@Embed(source='image/button_book_icon.png')" width="36" height="36" x="131.95" y="39" id="button1"/>
						<mx:Button label="全屏" icon="@Embed(source='image/button_book_icon.png')" width="36" height="36" x="185.9" y="39" click="fullscreen()" id="button3"/>
						<mx:Button label="字幕" icon="@Embed(source='image/button_text_icon.png')" width="36" height="36" x="240" y="39" id="button2" click="displayCaption()"/>
						<mx:Button label="帮助" icon="@Embed(source='image/button_help_icon.png')" width="36" height="36" x="78.9" y="39" id="button4" click="showHelp()"/>
						<mx:Button label="退出" icon="@Embed(source='image/button_exit_icon.png')" width="36" height="36" toolTip="退出" x="25.9" y="39" click="exit()" id="button5"/>
						<mx:HSlider x="700" y="45" width="106" id="columeSlider" liveDragging="true" allowTrackClick="true" minimum="0" maximum="1" change="columeChange(event)" value="0.6"/>
						<mx:Label text="音量控制" width="67.95" height="20" fontSize="12" x="622" y="48" textAlign="center"/>
					</mx:Canvas>					
   				</mx:VBox>
			</mx:AddChild>
			<mx:SetStyle name="verticalAlign" value="middle"/>
			<mx:SetProperty name="layout" value="absolute"/>
		</mx:State>
		
		<mx:State name="fullscreen" basedOn="main">
			<mx:RemoveChild target="{image1}"/>
			<mx:RemoveChild target="{panel1}"/>
			<mx:RemoveChild target="{label2}"/>
			<mx:RemoveChild target="{skinComb}"/>
			<mx:RemoveChild target="{button5}"/>
			<mx:RemoveChild target="{button4}"/>
			<mx:RemoveChild target="{button1}"/>
			<mx:RemoveChild target="{button3}"/>
			<mx:RemoveChild target="{button2}"/>
			<mx:AddChild relativeTo="{controlCanvas}" position="lastChild">
				<mx:Button x="198.05" y="50" label="返回主页" height="27" width="71.9" click="normalscreen()"/>
			</mx:AddChild>
			<mx:SetProperty target="{mainVBox}" name="width" value="100%"/>
			<mx:SetProperty target="{hdividedbox1}" name="height" value="85%"/>
			<mx:AddChild relativeTo="{controlCanvas}" position="lastChild">
				<mx:Button x="21" y="50" label="课程目录" height="27" click="popupCourseMenu()" width="71"/>
			</mx:AddChild>
			<mx:SetStyle target="{mainVBox}" name="horizontalAlign" value="center"/>
			<mx:SetStyle target="{mainVBox}" name="verticalAlign" value="middle"/>
			<mx:SetStyle target="{swfBox}" name="verticalAlign" value="middle"/>
			<mx:RemoveChild target="{spacer1}"/>
			<mx:AddChild relativeTo="{controlCanvas}" position="lastChild">
				<mx:Button x="109.05" y="50" label="再次全屏" height="27" width="73" click="again()"/>
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="header">			
			<mx:AddChild position="lastChild">
				<mx:SWFLoader horizontalAlign="center" verticalAlign="middle" source="{header.@path}" id="swfI" scaleContent="true" width="100%" height="100%" horizontalCenter="0" verticalCenter="0" autoLoad="true"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button click="main()" icon="@Embed(source='image/skip.jpg')" overIcon="@Embed(source='image/skiped.jpg')" width="60" x="851" y="585" id="btnSkip"/>
			</mx:AddChild>
			<mx:SetStyle name="verticalAlign" value="middle"/>
		</mx:State>
		<mx:State name="again" basedOn="fullscreen">
			<mx:RemoveChild target="{image2}"/>
			<mx:RemoveChild target="{controlCanvas}"/>
			<mx:SetProperty target="{hdividedbox1}" name="height" value="100%"/>
			<mx:AddChild relativeTo="{hbox1}" position="lastChild">
				<mx:Button label="返回" id="button7" click="back()"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{button7}" position="before">
				<mx:Spacer width="100%"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:Script>
		<![CDATA[
			import mx.events.ToolTipEvent;
			import flash.net.SharedObject;
			import mx.events.TreeEvent;	
			import mx.controls.Alert;		
			import mx.managers.SystemManager;						
			import component.captionWindow;		
			import mx.managers.PopUpManager;
			import component.courseMenu;			
			import flash.net.navigateToURL;
			import mx.controls.ComboBox;			
			import mx.events.ListEvent;			
			import mx.rpc.events.ResultEvent;			
			import mx.events.SliderEvent;			
			import flash.utils.Timer;
			import flash.events.TimerEvent;	
			import mx.events.FlexEvent;	
							
			[Bindable]
			private var mc:MovieClip=null;
			[Bindable]
			private var treeMenuData:XMLList;
			[Bindable]
			private var currentChapterName:String;
			[Bindable]
			private var currentSectionName:String;
			[Bindable]
			private var skinData:XMLList;
			[Bindable]
			private var header:XMLList;	
			[Bindable]
			private var currentTime:String="0:00";
			[Bindable]
			private var totalTime:String="0:00";
			[Bindable]
			private var currentPage:int;
			[Bindable]
			private var totalPage:int;
			
			[Bindable]
			[Embed(source="image/button_sound_icon.png")]
			private var shutIcon:Class;
			[Bindable]
			[Embed(source="image/colume.jpg")]
			private var openIcon:Class;
			[Bindable]
			[Embed(source="image/confirm.gif")]
			private var readedIcon:Class;
			[Bindable]
			[Embed(source="image/course.gif")]
			private var defaultLeafIcon:Class;
			
			private var timer:Timer;
			private var skinItem:XMLList;
			private var courseItem:XMLList;
			private var app:Object;
			private var sound:Sound;
			private var soundChan:SoundChannel;
			private var soundTran:SoundTransform;
			private var controlFile:XMLList;
			private var coursemenuWindow:courseMenu;	
			private var currentPosition:Number;
			private var tempItem:Object=null;
			private var readedCourseInfo:Array=new Array();
			private var so:SharedObject;
			
			private function init():void
			{
				httpSvr.send();
			}
			
			internal function main():void
			{	
				try
				{//停止片头播放
					MovieClip(swfI.content).stop();
				}
				catch(e:Error)
				{
					Alert.show("SWF文件转换成MovieClip对象时出现问题,\n可能与flash版本有关.","停止片头播放出错");
				}
				
				so=SharedObject.getLocal("logInfo","/");
				if(so==null)
				{
					Alert.show("无法创建或获取本地共享对象!","Error");
				}
				else
				{
					if(so.data.readedInfo==null)
					{
						so.data.readedInfo=readedCourseInfo;
					}
					else
					{
						readedCourseInfo=so.data.readedInfo;
					}
				}
								
				currentState = "main";											
				this.callLater(expandAllNode);//在 FlashPlayer没有重绘之前，有些函数调用的时候，实际的组件并没有重新生成好。任何一个Flex组件都有一个callLater(method:Function,args:Array = null)方法的
				courseItem=XMLList((treeMenuData[0].section)[0]);//初始值,默认显示第一章的第一节课内容	
				totalPage=getTotalPages();
				loadHandle(courseItem);
				setBreadCrumb(courseItem);									
				btnPlay.visible=false;
				timer=new Timer(40);//定时器,每隔10毫秒(一帧83.3毫秒)执行一次timerHandler事件			
				timer.addEventListener(TimerEvent.TIMER,timerHandler);	
			    this.stage.focus=this;//激活键盘状态
				this.addEventListener(KeyboardEvent.KEY_UP,onKeyUp);
			}
					
			internal function popupCourseMenu():void
			{	
				if(!coursemenuWindow.isPopUp)
				{
					PopUpManager.addPopUp(coursemenuWindow,swfC,false);
					var point:Point=new Point();					
					point=swfC.localToGlobal(point);					
					coursemenuWindow.x=point.x;
					coursemenuWindow.y=point.y;
				}
				else
				{
					PopUpManager.removePopUp(coursemenuWindow);
				}			
			}
			
			internal function fullscreen():void
			{
				this.currentState="fullscreen";						
				coursemenuWindow=new courseMenu();
				coursemenuWindow.addChild(treeMenu);
				if(captionWin.isPopUp)
				{   
					captionWin.x=(this.width-captionWin.width)/2;
					captionWin.y=this.height-87-53-12;						
				}
			}
			
			internal function normalscreen():void
			{
				if(coursemenuWindow.isPopUp)
				{
					PopUpManager.removePopUp(coursemenuWindow);
				}
				panel1.addChild(treeMenu);
				this.currentState="main";
				if(captionWin.isPopUp)
				{ 					
					captionWin.x=294;
					captionWin.y=this.height-87-53-5;
				}
			}
			
			public function again():void
			{
				this.currentState="again";	
				this.stage.displayState=StageDisplayState.FULL_SCREEN;
			}
			
			public function back():void
			{
				fullscreen();	
			}
			
			//展开所有节点
			internal function expandAllNode():void
			{
				for each(var item:XML in treeMenu.dataProvider)
				{					
					treeMenu.expandChildrenOf(item,true);
				}
			}
			
			//当点击分支（目录）时，实现展开或折叠（晚于change事件）
//			public function treeItemClick(evt:ListEvent):void
//			{
//				var item:Object=Tree(evt.currentTarget).selectedItem;
//				if(treeMenu.dataDescriptor.isBranch(item))
//				{
//					treeMenu.expandItem(item,!treeMenu.isItemOpen(item),true);
//				}
//				//Tree(evt.currentTarget).selectedItem=null;//可以连续点击同一节点
//			}
			
			private function columeChange(evt:SliderEvent):void
			{
				if(btnShutSound.label=="静音")
				{
					if(soundChan!=null)
            		{
            			soundTran.volume=evt.value;
						soundChan.soundTransform=soundTran;
            		}
				}
			}
			
			internal function skin_change(evt:ListEvent):void
			{
				this.unloadallStyle();			
				skinItem=XMLList(ComboBox(evt.currentTarget).selectedItem);
				StyleManager.loadStyleDeclarations(skinItem.@path,true);
			}
			
			internal function unloadallStyle():void			
			{
				for each(var skinItem:XML in this.skinComb.dataProvider)
				{					
					StyleManager.unloadStyleDeclarations(skinItem.@path,true);
				}				
			}
			
			//httpservice结果处理函数
			internal function resultHandler(event:ResultEvent):void
			{				
				header=XMLList(XML(event.result).Header);						
				treeMenuData=XMLList(XML(event.result).CourseList.Chapter);	
				skinData=XMLList(XML(event.result).Skins.skin);	
				this.currentState="header";					
			}
			
			 //设定面包屑
			internal function setBreadCrumb(item:XMLList):void
			{
				if(item.parent().@name==undefined)
                {
                	this.currentChapterName=item.@name;
                }
                else
                {
                	this.currentChapterName=item.parent().@name;
                }
				this.currentSectionName=item.@name;
			}
			
			//在树的分支打开或关闭前一刻调度 如果关闭的分支是当前项的父类,则把当前项保存到临时变量tempItem中 便于"上一页/下一页"操作
			public function onItemClosing(evt:TreeEvent):void
			{
				if(evt.item==treeMenu.getParentItem(treeMenu.selectedItem))
				{
					tempItem=treeMenu.selectedItem;
				}
			}
			
			public function stopSound(event:TimerEvent=null):void
			{
				if(soundChan!=null)
            	{
            		soundChan.stop();
            		soundChan=null;
            		this.stage.removeEventListener(Event.ENTER_FRAME,captionHandler);
            	}  
			}
			
			public function startTreeToolTip(evt:ToolTipEvent):void
			{
				//Alert.show("test");	
			}
			
			//tree change事件		                 
            internal function treeMenuChanged(event:Event):void 
            {
            	//progress重置 
            	progress.setProgress(0,0);
            	slider.value=0;
            	stopSound();
            	
            	if(btnPlay.visible==true)
				{
					btnPlay.visible=false;
					btnPause.visible=true;	
				}
                courseItem=XMLList(Tree(event.currentTarget).selectedItem);
                if(courseItem.@type=="chapter"&&courseItem.@hasFlash=="false")
                {//如果当前选择的swf不存在（当前项为目录），则跳到下一个节点
                	if(!treeMenu.isItemOpen(treeMenu.getParentItem(treeMenu.selectedItem)))
					{
						//Alert.show("当前项关闭","调试");	
						treeMenu.expandChildrenOf(treeMenu.selectedItem,true);
					}					
					treeMenu.selectedIndex=treeMenu.selectedIndex+1;
					if(treeMenu.dataDescriptor.isBranch(treeMenu.selectedItem)&&!treeMenu.isItemOpen(treeMenu.selectedItem))
					{
						//Alert.show("下一项是分支并且关闭","调试");	
						treeMenu.expandChildrenOf(treeMenu.selectedItem,true);
					}		
					treeMenu.dispatchEvent(new ListEvent(ListEvent.CHANGE));//派发change事件（递归）                	
                }
                else
                {
                	loadHandle(courseItem);
                }                
                setBreadCrumb(courseItem);                       
            } 
            
           	private function loadHandle(courseItem:XMLList):void
           	{
           		if(courseItem.@type=="synchronizing")
                {
                	currentPage=getCurrentPage(int(courseItem.@id));
                	var loader:URLLoader=new URLLoader();
                	loader.load(new URLRequest(courseItem.@xml));
                	loader.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
                	loader.addEventListener(Event.COMPLETE,controlFileHandler);
                }
                else
                {
                	currentPage=getCurrentPage(int(courseItem.@id));
                	swfC.source=courseItem.@path;
                	captionWin.message="无字幕...";
                }               
           	}
           	
           	public function getCurrentPage(id:int):int
           	{
           		var count:int=0;
           		var temp:int=0;
           		for each(var item:XML in treeMenuData)
           		{
           			var flag:int=0;
           			var len:int=item.section.length();
           			if(len==0)
           			{
           				if(item.@hasFlash=="true")
           				{
           					flag=1;    
           				}
           			}
           			else
           			{
           				for(var i:int=0;i<len;i++)
  						{
  							if(int(item.section[i].@id)==id)
  							{
  								flag=i+1;
  								break;
  							}  						
  						}
           			}
  					if(flag==0)
  					{
  						temp=item.section.length();
  					}
  					else
  					{
  						temp=flag;
  						break;
  					}
  					count=count+temp;
           		}  				
  				return count+temp;
           	}
           	
           	public function readedIconFun(item:Object):*
           	{
           		var node:XML=item as XML;
           		var returnIcon:Class=defaultLeafIcon;
           		for(var i:int=0;i<readedCourseInfo.length;i++)
           		{
           			if(node.@id==readedCourseInfo[i])
           			{
           				returnIcon=readedIcon;
           				break;
           			}
           		}
           		return returnIcon;
           	}
           	
           	public function startSound(position:Number):void
           	{
           		if(soundChan!=null)
           		{
           			soundChan.stop();	
           		}
                soundChan=sound.play(position);
              	soundTran=soundChan.soundTransform;
              	soundTran.volume=columeSlider.value;
              	soundChan.soundTransform=soundTran;
              	this.stage.addEventListener(Event.ENTER_FRAME,captionHandler);
           	}
           	
           	public function convertToMS(time:String):Number
           	{
           		return (Number(time.substr(0,2))*60+Number(time.substr(3,5)))*1000;
           	}
           	
            private function captionHandler(evt:Event):void
            {  
            	var caption:String="无字幕..."; //缓冲变量 
            	for(var i:int=1;i<controlFile.length();i++)
            	{
            		var time:Number=convertToMS(controlFile[i].startTime);
            		if(soundChan.position<time)
            		{
            			caption=String(controlFile[i-1].caption); 
            			break;
            		}
            		caption=String(controlFile[controlFile.length()-1].caption);
            	}
            	captionWin.message=caption; 
            }
            
            private function controlFileHandler(evt:Event):void
            {
            	controlFile=XMLList(evt.target.data).section; 
            	sound=new Sound();
                sound.load(new URLRequest(courseItem.@mp3));
                sound.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
                sound.addEventListener(Event.COMPLETE,soundLoadComplete);
            }
            
            public function soundLoadComplete(evt:Event):void
            {
            	swfC.source=treeMenu.selectedItem.@swf; 
            }
            	
            public function ioErrorHandler(evt:IOErrorEvent):void
            {
            	Alert.show("加载外部文件时出错,请检查路径是否正确!\nMessage:"+evt.target.toString(),"错误提示");
            }
            		
			//格式化progressBar的提示时间:取分钟
			internal function formatSliderToolTip(value:int):String
    		{
    			value=Math.ceil(value / 12);  //flash 12frames/s  			
    			var result:String = (value % 60).toString();
      		    if (result.length == 1)
      		    {
         			result = Math.floor(value / 60).toString() + ":0" + result;
       		 	}
      			else
			  	{
       		    	result = Math.floor(value / 60).toString() + ":" + result;
       		  	}      			      			 
      		    return result;
  			} 
  			  
  			//swfloader删除加载的对象时；或同一 SWFLoader控件执行另一加载，并且在新加载开始之前删除原始内容时调度。
  			internal function unloadHandler():void
  			{
  				if(mc!=null)
  				{	
  					mc.gotoAndStop(0);//停止上一swf实例播放
  					mc=null;
  				}				
  			}
  			
  			internal function getTotalPages():int
  			{
  				var count:int=0;
  				for(var i:int=0;i<treeMenuData.length();i++)
  				{
  					var temp:int=treeMenuData[i].section.length();
  					if(temp==0)temp=1;
  					count=count+temp;
  				}
  				return count;
  			}
  			
  			//定时器处理函数 
			internal function timerHandler(event:TimerEvent):void
			{
				if(treeMenu.selectedItem.@type=="synchronizing")
				{
					synchronizationHandler();
				}	
				currentTime=formatSliderToolTip(mc.currentFrame);			
				slider.value=mc.currentFrame;	
				progress.setProgress(mc.currentFrame,mc.totalFrames);											
			}	
					
			//init事件是在已加载的SWF文件的属性和方法可访问时调度
			private function templateInit(evt:Event):void
			{
				if(treeMenu.selectedItem.@type=="template"&&treeMenu.selectedItem.@hasFlash=="true")
				{//给SystemManager添加applicationComplete事件侦听器														
					evt.target.content.addEventListener(FlexEvent.APPLICATION_COMPLETE,appCompleteHandler);
				}
			}
			
			private function appCompleteHandler(evt:Event):void
			{
				app=evt.target.application;				
				app.setApp(this);//把当前application对象传给外部的swf 以便相互通信
				SystemManager(evt.target).removeEventListener(FlexEvent.APPLICATION_COMPLETE,appCompleteHandler);
			}
			
			public function innerSwfComplete():void
			{
				mc=app.mc;
				totalTime=formatSliderToolTip(mc.totalFrames);
				normalHandler();	
			}
			
			//swfloader complete事件处理函数(swf加载完成时调度)
			internal function completeHandler():void
			{
				var id:String=treeMenu.selectedItem.@id; 
				readedCourseInfo.push(id);
				
				if(treeMenu.selectedIndex==-1)
				{
					treeMenu.selectedIndex=1;	
				}
				if(treeMenu.selectedItem.@type!="template")
				{
					try
					{					
						mc=MovieClip(swfC.content);
						if(treeMenu.selectedItem.@type=="synchronizing"&&int(controlFile[0].startFrame)==1)
						{
							soundHandler(controlFile[0]);
						}
						totalTime=formatSliderToolTip(mc.totalFrames);
						normalHandler();
					}
					catch(e:Error)
					{
						Alert.okLabel="确定";
						Alert.show("SWF文件转换成MovieClip对象时出现问题,\n可能与flash版本有关.","提示");
						errorHandler();
					}		
				}
				else if(treeMenu.selectedItem.@isMultipage!="true")
				{ 
					errorHandler();
				}					
			}	
			
			public function soundHandler(item:XML):void
			{
				var interval:Number=convertToMS(item.endTime)-convertToMS(item.startTime);
				startSound(convertToMS(item.startTime));
				intervalTimer=new Timer(interval,1);
				intervalTimer.addEventListener(TimerEvent.TIMER,stopSound);
				intervalTimer.start();
			}
			
			public function normalHandler():void
			{
				if(timer.running==false)
				{
					timer.start();
				}
				if(slider.enabled==false)
				{
					slider.enabled=true;
				}
				if(progress.enabled==false)
				{
					progress.enabled=true;
				}	
			}
			
			public function errorHandler():void
			{
 				totalTime="0:00";
 				currentTime="0:00";
				if(slider.enabled==true)
				{
					slider.enabled=false;
				}
				if(timer.running==true)
				{
					timer.stop();
				}
				if(progress.enabled==true)
				{
					progress.enabled=false;
				}	
			}
			private var intervalTimer:Timer;
			public function synchronizationHandler():void
			{
				for each(var item:XML in controlFile)
				{
					if(int(item.startFrame)==mc.currentFrame)
					{
						soundHandler(item);
						break;
					}
				}
			}
			
			//进度完成事件处理函数		
			internal function progressComplete():void
			{
				if(currentPage==totalPage)
				{//如果播放完最后一页则停止
					timer.stop();
 					btnPause.visible=false;
 					btnPlay.visible=true;
				}
				else
				{
					nextPage();//播放完自动开始下一个swf
				}				
			}
			
			public function pause():void
			{				
				if(timer.running==true)
				{
					timer.stop();
				}
				mc.stop();	
				if(soundChan!=null)
            	{
            		currentPosition=soundChan.position;
            		intervalTimer.stop();
               		soundChan.stop();
            	}
				btnPause.visible=false;
				btnPlay.visible=true;
			}
			
			public function play():void
			{
				mc.play();
				if(sound!=null)
            	{
            		soundChan=sound.play(currentPosition);
            		intervalTimer.start();
            	}
				if(timer.running==false)
				{
					timer.start();
				}	
				btnPlay.visible=false;
				btnPause.visible=true;
			}
			
			internal function slider_change(evt:SliderEvent):void
			{				
				progress.setProgress(evt.value,slider.maximum);	
				gotoFrame(evt.value);			
				if(timer.running==false)
				{
					timer.start();
				}	
				if(btnPlay.visible==true)
				{
					btnPlay.visible=false;
					btnPause.visible=true;	
				}
			}
			
			internal function gotoFrame(frame:int):void
			{
				mc.gotoAndPlay(frame);
			}
			
			//当前swf重新播放
			internal function stopBtnClick():void
			{
				gotoFrame(0);
				if(timer.running==false)
				{
					timer.start();
				}
				btnPlay.visible=false;
				btnPause.visible=true;
			}
			
			//上一页
			internal function prePage():void
			{
				if(treeMenu.selectedItem.@type=="template"&&treeMenu.selectedItem.@isMultipage=="true")
				{						
					var result:String=app.prePage();
					if(result=="first")
					{
						previous();
					}					
				}
				else
				{
					previous();
				}				
			}
			
			private function previous():void
			{
				if(!treeMenu.isItemOpen(treeMenu.getParentItem(treeMenu.selectedItem)))
				{					
					treeMenu.expandChildrenOf(treeMenu.selectedItem,true);
				}
				if(tempItem!=null)
				{
					treeMenu.selectedItem=tempItem;
					tempItem=null;
				}
				var temp:Object=treeMenu.selectedItem;				
				treeMenu.selectedIndex=treeMenu.selectedIndex-1; 
				if(treeMenu.selectedItem.@type=="chapter" && treeMenu.selectedItem.@hasFlash=="false")
                {
                	if(treeMenu.selectedItem==treeMenu.getParentItem(temp) && treeMenu.selectedIndex!=0)
                	{
                		treeMenu.selectedIndex=treeMenu.selectedIndex-1;
                	}                	
                }                
                if(treeMenu.dataDescriptor.isBranch(treeMenu.selectedItem)&&!treeMenu.isItemOpen(treeMenu.selectedItem))
				{					
					treeMenu.expandChildrenOf(treeMenu.selectedItem,true);
					treeMenu.selectedItem=temp;
					prePage();//递归
				}              				
 				treeMenu.dispatchEvent(new ListEvent(ListEvent.CHANGE));
			}
			
			//下一页
			internal function nextPage():void
			{
				if(treeMenu.selectedItem.@type=="template"&&treeMenu.selectedItem.@isMultipage=="true")
				{				
					var result:String=app.nextPage();
					if(result=="last")
					{
						next();
					}					
				}
				else
				{
					next();
				}				
			}
			
			private function next():void
			{
				if(!treeMenu.isItemOpen(treeMenu.getParentItem(treeMenu.selectedItem)))
				{
					//Alert.show("当前项关闭","调试");	
					treeMenu.expandChildrenOf(treeMenu.selectedItem,true);
				}
				if(tempItem!=null)
				{
					treeMenu.selectedItem=tempItem;
					tempItem=null;
				}				
				treeMenu.selectedIndex=treeMenu.selectedIndex+1;
				//Alert.show(treeMenu.selectedIndex.toString(),"调试");	
				if(treeMenu.dataDescriptor.isBranch(treeMenu.selectedItem)&&!treeMenu.isItemOpen(treeMenu.selectedItem))
				{
					//Alert.show("下一项是分支并且关闭","调试");	
					treeMenu.expandChildrenOf(treeMenu.selectedItem,true);
				}		
				treeMenu.dispatchEvent(new ListEvent(ListEvent.CHANGE));
			}
			
			//progressBar 点击鼠标开始拖动时触发
			internal function onPress():void
			{
				pause();							
			}
			
			//拖动结束松开鼠标时触发
			internal function onRelease():void
			{
				play();									
			}
			
			//显示字幕
			private var captionWin:captionWindow=new captionWindow();
			private function displayCaption():void
			{
				if(!captionWin.isPopUp)
				{
					PopUpManager.addPopUp(captionWin,swfBox);
					var point:Point=new Point();								
					point=swfBox.localToGlobal(point);
					captionWin.x=point.x;				
					captionWin.y=this.height-87-53-5;
					captionWin.width=swfBox.width-10;
				}
				else
				{
					PopUpManager.removePopUp(captionWin);					
				}
			}
			
			public function shutSound():void
			{
            	if(btnShutSound.label=="静音")
            	{
            		btnShutSound.setStyle("icon",shutIcon);
            		if(soundChan!=null)
            		{
            			soundTran.volume=0;
               			soundChan.soundTransform=soundTran;
            		}
               		btnShutSound.label="有音";
            	}
            	else
            	{
            		btnShutSound.setStyle("icon",openIcon);
            		if(soundChan!=null)
            		{
            			soundTran.volume=columeSlider.value;
                		soundChan.soundTransform=soundTran;
            		}
                	btnShutSound.label="静音";
            	}
			}
			
			//关闭当前程序的html页面
			public function exit():void
			{//一些浏览器不支持通过 navigateToURL() 方法使用 javascript 协议。而应考虑使用 ExternalInterface API 的 call() 方法在包含该内容的 HTML 页中调用 JavaScript 方法。
				navigateToURL(new URLRequest("javascript:window.close()"),"_self");
			}
			
			public function showHelp():void
			{
				navigateToURL(new URLRequest("http://www.baidu.com"),"_blank");
			}
			
			public function onKeyUp(evt:KeyboardEvent):void
			{//点空格键暂停或播放动画
				if(evt.charCode==32)
				{
					if(btnPlay.visible==false)
					{
						pause();
					}
					else
					{
						play();
					}
				}
			}
			
			public function writeLog():void
			{
				
			}
		]]>
	</mx:Script>
	
	<mx:HTTPService id="httpSvr" url="content.xml" result="resultHandler(event)" resultFormat="xml"/>
</mx:Application>
