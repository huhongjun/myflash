<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="310" creationComplete="init()" borderStyle="solid">
	<mx:FormHeading label="章信息" x="163" y="10"/>
	<mx:Canvas id="addPanel" width="390" height="82" y="26" x="4">
		<mx:FormItem label="所在课程" x="62.5" y="10">
			<mx:ComboBox id="inCourse" labelField="@name"/>
		</mx:FormItem>
		<mx:FormItem label="位置" x="85.5" y="42" direction="horizontal" horizontalGap="1">
			<mx:ComboBox id="afterChapter" dataProvider="{inCourse.selectedItem.chapter}" labelField="@name" prompt="首位"/>
			<mx:Label text="之后"/>
		</mx:FormItem>
		<mx:CheckBox id="firstPosition" x="308.5" y="42" label="居首" change="onChange()"/>
		<mx:HRule id="hRule0" width="300" height="1" x="57.5" y="75"/>
	</mx:Canvas>
	<mx:Canvas id="editPanel" height="200" width="390" y="107" x="4">
		<mx:FormItem label="章名称" x="77" y="6" required="true">
			<mx:TextInput id="cname"/>
		</mx:FormItem>
		<mx:FormItem label="章标题" x="77" y="36">
			<mx:TextInput id="title"/>
		</mx:FormItem>
		<mx:FormItem label="章类型" x="77" y="68" direction="horizontal">
			<mx:RadioButtonGroup id="chapterType" change="onChapterTypeChange(event)"/>
			<mx:RadioButton id="hasChild" label="有节点" groupName="chapterType" selected="true"/>
			<mx:RadioButton id="noChild" label="无节点" groupName="chapterType"/>
		</mx:FormItem>
		<mx:HRule id="hRule" width="275" height="1" x="61.5" y="99"/>
		<mx:FormItem id="itemType" label="文件类型" x="61.5" y="109">
			<mx:ComboBox id="type">
				<mx:dataProvider>
					<mx:Array>
						<mx:Object label="Flash" data="flash"/>
						<mx:Object label="Flex" data="flex"/>
						<mx:Object label="Image" data="image"/>
						<mx:Object label="Album" data="album"/>
						<mx:Object label="Flv" data="flv"/>
					</mx:Array>
				</mx:dataProvider>
			</mx:ComboBox>
		</mx:FormItem>
		<mx:FormItem id="itemPath" label="文件路径" direction="horizontal" x="61.5" y="139">
			<mx:TextInput id="path" width="160"/>
			<mx:Button label="浏览" click="file.browseForOpen('选择文件');temp='path'"/>
		</mx:FormItem>	
		<mx:FormItem id="itemXML" label="配置文件" direction="horizontal" x="61.5" y="169">
			<mx:TextInput id="xml" width="160"/>
			<mx:Button label="浏览" click="file.browseForOpen('选择文件');temp='xml'"/>
		</mx:FormItem>
	</mx:Canvas>
	<mx:StringValidator id="stringValidator" requiredFieldError="值不能为空!"/>
	<mx:DateFormatter id="formatter" formatString="DDHNNSS"/>
	<mx:Script>
		<![CDATA[
			import mx.events.ListEvent;
			import puremvc.model.utils.CurrentInfo;
			import mx.events.ValidationResultEvent;		
			private var file:File=File.applicationDirectory;		
			private var temp:String;
			private var cid:String;
			public var state:String;			
			
			public function init():void
			{
				file.addEventListener(Event.SELECT,onSelect);
				hideItem();
			}
			public function onSelect(evt:Event):void
			{
				if(temp=="path")
				{
					path.text=evt.target.nativePath;
				}
				if(temp=="xml")
				{
					xml.text=evt.target.nativePath;
				}
			}
			public function onChange():void
			{
				if(this.firstPosition.selected){
					this.afterChapter.enabled=false;
				}else{
					this.afterChapter.enabled=true;
				}
			}
			public function reset():void
			{
				this.cname.text=null;
				this.type.selectedIndex=0;
				this.chapterType.selection=hasChild;
				hideItem();
				this.path.text=null;
				this.title.text=null;
				this.xml.text=null;
				this.firstPosition.selected=false;
				this.firstPosition.dispatchEvent(new ListEvent(ListEvent.CHANGE));
			}
			public function setter(data:XML):void
			{
				this.cid=data.@id;
				if(data.hasOwnProperty("@name"))this.cname.text=data.@name;
				if(data.hasOwnProperty("@title"))this.title.text=data.@title;
				if(data.elements().length()!=0)
				{
					hideItem();
					this.chapterType.selection=hasChild;
				}
				else
				{
					displayItem();
					this.chapterType.selection=noChild;
					if(data.hasOwnProperty("@type")){
						switch(data.@type.toString())
						{
							case "flash" : this.type.selectedIndex=0;break;
							case "flex"  : this.type.selectedIndex=1;break;
							case "image" : this.type.selectedIndex=2;break;
							case "album" : this.type.selectedIndex=3;break;
							case "flv"   : this.type.selectedIndex=4;break;
						}	
					}			
					if(data.hasOwnProperty("@path"))this.path.text=data.@path;					
					if(data.hasOwnProperty("@xml"))this.xml.text=data.@xml;
				}				
			}
			public function getter():XML
			{
				var currInfo:CurrentInfo=CurrentInfo.getInstance();
				var xml:XML=<chapter/>;
				if(state=="edit")
				{
					xml.@id=this.cid;
				}
				else if(state=="add")
				{
					xml.@id=formatter.format(new Date());
				}				
				xml.@name=cname.text;
				if(title.text!=null && title.text!="")xml.@title=title.text;
				if(chapterType.selection==noChild)
				{
					xml.@type=type.selectedItem.data;
					xml.@path=path.text;					
					if(xml.text!=null && xml.text!="")xml.@xml=this.xml.text;
				}
				else
				{
					if(state=="edit")
					{
						if(currInfo.getChapter().section==undefined)
						{
							var newNode:XML=<section/>;
							newNode.@id=formatter.format(new Date());
							xml.setChildren(newNode);
						}
						else
						{
							xml.setChildren(currInfo.getChapter().section);
						}
					}					
				}					
				return xml;
			}
			public function getPosition():Object
			{
				var obj:Object=new Object();
				obj.inCourse=this.inCourse.selectedItem;			
				if(this.firstPosition.selected==false)
				{
					obj.afterChapter=this.afterChapter.selectedItem;
				}				
				return obj;
			}
			public function onChapterTypeChange(evt:Event):void
			{
				if(chapterType.selection==noChild)
				{
					displayItem();
				}
				else
				{
					hideItem();
				}
			}
			public function displayItem():void
			{
				if(!editPanel.contains(hRule))editPanel.addChild(hRule);
				if(!editPanel.contains(itemType))editPanel.addChild(itemType);
				if(!editPanel.contains(itemPath))editPanel.addChild(itemPath);
				if(!editPanel.contains(itemXML))editPanel.addChild(itemXML);
			}
			public function hideItem():void
			{
				if(editPanel.contains(hRule))editPanel.removeChild(hRule);
				if(editPanel.contains(itemType))editPanel.removeChild(itemType);
				if(editPanel.contains(itemPath))editPanel.removeChild(itemPath);
				if(editPanel.contains(itemXML))editPanel.removeChild(itemXML);
			}
			public function validate():Boolean
			{
				stringValidator.listener=cname;				
				var nameVR:ValidationResultEvent=stringValidator.validate(cname.text);				
				if(nameVR.type==ValidationResultEvent.VALID){
					return true;
				}else{
					return false;
				}
			}
			public function changePosition():void
			{
				if(this.state=="edit")
				{
					this.addPanel.visible=false;
					this.editPanel.y=this.addPanel.y+10;
				}
				else
				{
					this.addPanel.visible=true;
					this.editPanel.y=this.addPanel.y+this.addPanel.height;
				}	
				setCurrentInfo();					
			}
			public function setCurrentInfo():void
			{
				var currInfo:CurrentInfo=CurrentInfo.getInstance();
				this.inCourse.selectedItem=currInfo.getCourse();
				if(currInfo.getChapter()!=null&&XMLList(afterChapter.dataProvider).contains(currInfo.getChapter()))
				{
					this.afterChapter.selectedItem=currInfo.getChapter();
				}
				else
				{
					this.afterChapter.selectedIndex=XMLList(afterChapter.dataProvider).length()-1;
				}				
			}
		]]>
	</mx:Script>	
</mx:Canvas>
